package team050;

public class StringHeap {
    // The concept is to use stringbuilder and its nice .index method
    private StringBuilder data;

    /*
     * The structure of data is X1YX2YX3YX4YX5YX6YX7YX8YX9YXZijY10Y11Y12
     * 
     * To get the least, get the index of Z which is preceded by value and followed by char(y)
     * char(x)
     */

    public StringHeap(int _x, int _y) {
        data = new StringBuilder(

        for (char x = 1; x <= _x; x++) {
            String a = "Z" + x;
            for (char y = 1; y <= _y; y++) {
                data.append(a + y);
            }
        }
    }

    public int xyToInt(char x, char y) {
        return 100 * x + y - 101;
    }

    public int getMinVal() {
        int indexOfKey = data.indexOf("Z");
        int startOfNumber = data.lastIndexOf("X", indexOfKey);
        int endOfNumber = data.indexOf("Y", startOfNumber);
        return Integer.parseInt(data.substring(startOfNumber + 1, endOfNumber));
    }

    public int extractMin() {
        // TODO: This is always called after getMinVal, so not repeat indexof z
        // Instead, combine and store in static
        int minIndex = data.indexOf("Z");
        char x = data.charAt(minIndex + 1);
        char y = data.charAt(minIndex + 2);
        data.delete(minIndex, minIndex + 3);
        return xyToInt(x, y);
    }

    public String keyToString(int key) {
        key += 101;
        int y = key % 100;
        int x = key / 100;
        return "Z" + (char) x + (char) y;
    }

    public void decreaseKey(int key, int newValue) {
        // Remove the old
        String str = keyToString(key);
        int keyIndex = data.indexOf(str);
        data.delete(keyIndex, keyIndex + 3);

        // Input the new
        int startOfInsert = data.indexOf("X" + Integer.toString(newValue) + "Y");
        data.insert(startOfInsert + 5, str);
    }

    public int getVal(int key) {
        String str = keyToString(key);
        int indexOfKey = data.indexOf(str);
        int startOfNumber = data.lastIndexOf("X", indexOfKey);
        int endOfNumber = data.indexOf("Y", startOfNumber);
        return Integer.parseInt(data.substring(startOfNumber + 1, endOfNumber));
    }
}
